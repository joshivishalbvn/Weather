To manage and run multiple terminals for all services in your Docker setup, you have several options. Here's how you can manage your containers with multiple terminals efficiently:

### 1. **Using `docker-compose` with multiple services**

With `docker-compose`, you can run multiple services (such as your Django app, Redis, and PostgreSQL) simultaneously. Each service will run in its own container. You can open separate terminal windows or tabs to interact with each of them.

#### To run all services:
Run the following command in the directory where your `docker-compose.yml` file is located:
```bash
docker-compose up
```
This will start all the services defined in your `docker-compose.yml` file (e.g., `web`, `redis`, `db`). It will display logs from all services in the terminal.

### 2. **Using `docker-compose` in Detached Mode (Background)**

To run the services in the background (detached mode) and still interact with them, you can use the `-d` flag:
```bash
docker-compose up -d
```
This will start the containers in the background, allowing you to use the terminal for other tasks.

#### Then, open separate terminals to interact with each service:
- For example, you can open one terminal to check logs for the Django web server:
  ```bash
  docker-compose logs -f web
  ```
- Another terminal for the Redis service logs:
  ```bash
  docker-compose logs -f redis
  ```
- Or another terminal for your database logs:
  ```bash
  docker-compose logs -f db
- Or another terminal for your celery logs:
  ```bash
  docker-compose logs -f celery
  ```
- Or another terminal for your celery-beat logs:
  ```bash
  docker-compose logs -f celery-beat
  ```

### 3. **Using `docker exec` to Open Shells in Running Containers**

If you need to interact with a specific container, you can use `docker exec` to start a shell in the running container.

#### Example 1: Open a shell inside the Django container:
```bash
docker exec -it weather_app-web-1 /bin/bash
```
This will open an interactive bash shell inside your web container. You can then run Django management commands, access the file system, or debug issues directly in the container.

#### Example 2: Open a shell inside the Redis container:
```bash
docker exec -it weather_app-redis-1 /bin/bash
```

#### Example 3: Open a shell inside the PostgreSQL container:
```bash
docker exec -it weather_app-db-1 /bin/bash
```

### 4. **Multiple Terminals with `tmux` or `screen`**

For more advanced terminal multiplexing, you can use tools like `tmux` or `screen` to split a single terminal window into multiple panes. This is useful if you want to keep everything in one window instead of switching between multiple terminal windows or tabs.

#### Using `tmux`:

1. Install `tmux` if you don't have it installed (it may already be available in your terminal).
   - On Ubuntu/Debian: `sudo apt install tmux`
   - On macOS (using Homebrew): `brew install tmux`

2. Start a new `tmux` session:
   ```bash
   tmux new-session -s weatherapp
   ```

3. Split the screen into multiple panes:
   - Press `Ctrl + b` then `%` to split vertically.
   - Press `Ctrl + b` then `"` to split horizontally.

4. You can then run different commands in each pane. For example:
   - In one pane, run your Django server logs: `docker-compose logs -f web`
   - In another pane, run Redis logs: `docker-compose logs -f redis`
   - In another, access a container shell: `docker exec -it weather_app-web-1 /bin/bash`

5. To detach from the `tmux` session, press `Ctrl + b` then `d`. To reattach later:
   ```bash
   tmux attach-session -t weatherapp
   ```

### 5. **Using `docker-compose exec` for Running Commands in a Running Service**

Another way to open multiple terminals is by using `docker-compose exec`. For instance, if you want to run commands inside the running `web`, `redis`, or `db` services without opening a separate terminal window:

- To run a Django management command (e.g., `migrate`) inside the web container:
  ```bash
  docker-compose exec web python manage.py migrate
  ```

- To start a Redis CLI session inside the Redis container:
  ```bash
  docker-compose exec redis redis-cli
  ```

### 6. **Visual Studio Code (VSCode) Dev Containers (Optional)**

If you are using Visual Studio Code (VSCode), you can use the "Remote - Containers" extension to manage Docker containers directly from the IDE. This allows you to open and interact with your code and containers from a unified environment.

1. Install VSCode and the Remote - Containers extension.
2. Open your project in VSCode.
3. Use the "Remote - Containers" feature to open your app in a dev container directly inside the IDE.

This option allows you to run your containers, access their logs, and interact with them all within the IDE.

---

### Summary:

- **Multiple Terminals**: Open separate terminals for each service (`docker-compose logs -f <service>` for logs, `docker exec -it <container> /bin/bash` for shell access).
- **Detached Mode**: Run containers in the background with `docker-compose up -d` and use `docker-compose logs -f` to check logs.
- **`tmux` or `screen`**: Split your terminal window to monitor multiple services in one terminal session.
- **VSCode Remote Containers**: If you're using VSCode, the Remote - Containers extension provides a unified way to work with Docker directly in the IDE.

These methods give you the flexibility to manage and monitor multiple services running in Docker simultaneously!